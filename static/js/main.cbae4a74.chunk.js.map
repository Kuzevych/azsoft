{"version":3,"sources":["style/useStyles.js","App.js","utils/getPossibleIPs.js","utils/filterDigits.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","margin","spacing","width","container","textAlign","marginTop","title","demo","backgroundColor","palette","background","paper","listItem","fontStyle","App","useState","value","setValue","classes","ips","rawIpStr","possibleDotsIndexes","length","dot1I","dot2I","dot3I","push","map","slice","filter","ipParts","every","part","parseInt","join","getPossibleIPs","Container","maxWidth","className","Typography","component","style","height","noValidate","autoComplete","TextField","onChange","target","val","replace","id","label","variant","List","el","idx","ListItem","key","ListItemText","primary","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uRAEaA,EAAYC,aAAW,SAACC,GAAD,MAAY,CAC5CC,KAAM,CACF,QAAS,CACLC,OAAQF,EAAMG,QAAQ,GACtBC,MAAO,SAGfC,UAAW,CACPC,UAAW,SACXC,UAAW,QAEfC,MAAO,CACHN,OAAQF,EAAMG,QAAQ,EAAG,EAAG,IAEhCM,KAAM,CACFC,gBAAiBV,EAAMW,QAAQC,WAAWC,OAE9CC,SAAU,CACNR,UAAW,SACXS,UAAW,cCiCJC,EAxCH,WAAO,IAAD,EACYC,mBAAS,IADrB,mBACPC,EADO,KACAC,EADA,KAQRC,EAAUtB,IACVuB,ECtBoB,SAACC,GAI3B,IAHA,IAAMC,EAAsB,GACtBC,EAASF,EAASE,OAEfC,EAAQ,EAAGA,GAASD,EAAS,EAAGC,IACrC,IAAK,IAAIC,EAAQ,EAAGA,GAASF,EAAS,EAAGE,IACrC,IAAK,IAAIC,EAAQ,EAAGA,GAASH,EAAS,EAAGG,IACjCD,EAAQD,GAAS,GAAKE,EAAQD,GAAS,GACvCH,EAAoBK,KAAK,CAACH,EAAOC,EAAOC,IAMxD,OAAOJ,EACFM,KAAI,mCAAEJ,EAAF,KAASC,EAAT,KAAgBC,EAAhB,WAA2B,CAC5BL,EAASQ,MAAM,EAAGL,GAClBH,EAASQ,MAAML,EAAOC,GACtBJ,EAASQ,MAAMJ,EAAOC,GACtBL,EAASQ,MAAMH,OAElBI,QAAO,SAACC,GAAD,OACJA,EAAQC,OAAM,SAACC,GACX,QAAgB,MAAZA,EAAK,IAAcA,EAAKV,OAAS,IAI9BW,SAASD,EAAM,KAAO,UAGpCL,KAAI,SAACG,GAAD,OAAaA,EAAQI,KAAK,QDRvBC,CAAenB,GAC3B,OACQ,kBAACoB,EAAA,EAAD,CAAWC,SAAS,KAAKC,UAAWpB,EAAQf,WACxC,kBAACoC,EAAA,EAAD,CAAYC,UAAU,MAAMC,MAAO,CAAEjC,gBAAiB,UAAWkC,OAAQ,SACrE,0BAAMJ,UAAWpB,EAAQnB,KAAM4C,YAAU,EAACC,aAAa,OACnD,kBAACC,EAAA,EAAD,CACIC,SAbJ,SAAC,GAA2B,IAAf9B,EAAc,EAAxB+B,OAAU/B,MACvBgC,EAAmBhC,EEjBQiC,QAAQ,SAAU,IFkBnDhC,EAAS+B,IAYWE,GAAG,iBACHlC,MAAOA,EACPmC,MAAM,gBACNC,QAAQ,cAGA,IAAfjC,EAAIG,QAAgBN,EACjB,kBAACuB,EAAA,EAAD,CAAYa,QAAQ,KAAKd,UAAWpB,EAAQZ,OAA5C,wCAIA,kBAAC+C,EAAA,EAAD,KACKlC,EAAIQ,KAAI,SAAC2B,EAAIC,GAAL,OACL,kBAACC,EAAA,EAAD,CAAUC,IAAKF,EAAKjB,UAAWpB,EAAQN,UACnC,kBAAC8C,EAAA,EAAD,CAAcC,QAASL,YGhCvCM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.cbae4a74.chunk.js","sourcesContent":["import { makeStyles } from '@material-ui/core/styles';\r\n\r\nexport const useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        '& > *': {\r\n            margin: theme.spacing(4),\r\n            width: '25vh',\r\n        },\r\n    },\r\n    container: {\r\n        textAlign: 'center',\r\n        marginTop: '50px'\r\n    },\r\n    title: {\r\n        margin: theme.spacing(4, 0, 2),\r\n    },\r\n    demo: {\r\n        backgroundColor: theme.palette.background.paper,\r\n    },\r\n    listItem: {\r\n        textAlign: 'center',\r\n        fontStyle: 'italic',\r\n    },\r\n}));","import React, { useState } from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\nimport TextField from '@material-ui/core/TextField';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\n\nimport {getPossibleIPs} from \"./utils/getPossibleIPs\";\nimport { filterDigits } from './utils/filterDigits';\nimport {useStyles} from \"./style/useStyles\";\n\n\n\nconst App = () => {\n    const [value, setValue] = useState('');\n    const handleInput = ({ target: { value } }) => {\n        const val = filterDigits(value);\n        setValue(val);\n\n    };\n\n    const classes = useStyles();\n    const ips = getPossibleIPs(value);\n    return (\n            <Container maxWidth=\"sm\" className={classes.container}>\n                <Typography component=\"div\" style={{ backgroundColor: '#cfe8fc', height: '75vh' }}>\n                    <form className={classes.root} noValidate autoComplete=\"off\">\n                        <TextField\n                            onChange={handleInput}\n                            id=\"outlined-basic\"\n                            value={value}\n                            label=\"Input numbers\"\n                            variant=\"outlined\"\n                        />\n                    </form>\n                    {ips.length === 0 && value ? (\n                        <Typography variant=\"h6\" className={classes.title}>\n                            No IPs can be formed with this input\n                        </Typography>\n                    ) : (\n                        <List>\n                            {ips.map((el, idx) => (\n                                <ListItem key={idx} className={classes.listItem}>\n                                    <ListItemText primary={el} />\n                                </ListItem>\n                            ))}\n                        </List>\n                    )}\n                </Typography>\n            </Container>\n    );\n};\n\nexport default App;\n","\r\nexport const getPossibleIPs = (rawIpStr) => {\r\n    const possibleDotsIndexes = [];\r\n    const length = rawIpStr.length;\r\n\r\n    for (let dot1I = 1; dot1I <= length - 3; dot1I++) {\r\n        for (let dot2I = 2; dot2I <= length - 2; dot2I++) {\r\n            for (let dot3I = 3; dot3I <= length - 1; dot3I++) {\r\n                if (dot2I - dot1I >= 2 && dot3I - dot2I >= 2) {\r\n                    possibleDotsIndexes.push([dot1I, dot2I, dot3I]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return possibleDotsIndexes\r\n        .map(([dot1I, dot2I, dot3I]) => [\r\n            rawIpStr.slice(0, dot1I),\r\n            rawIpStr.slice(dot1I, dot2I),\r\n            rawIpStr.slice(dot2I, dot3I),\r\n            rawIpStr.slice(dot3I),\r\n        ])\r\n        .filter((ipParts) =>\r\n            ipParts.every((part) => {\r\n                if (part[0] === '0' && part.length > 1) {\r\n                    return false;\r\n                }\r\n\r\n                return parseInt(part, 10) <= 255;\r\n            })\r\n        )\r\n        .map((ipParts) => ipParts.join('.'))\r\n};","export const filterDigits = data => data.replace(/[^\\d]/g, '');\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}